<?php
/**
 * Plugin Name:       RtC Slideshow
 * Description:       Adds a slideshow block generated by an external feed.
 * Version:           1.0.0
 * Requires at least: 6.7
 * Requires PHP:      8.2
 * Author:            GBaldwin
 * License:           GPL-2.0-or-later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       rtc-slideshow
 *
 * @package RtcSlideshow
 */

namespace Gbaldwin\RtcSlideshow;

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

/**
 * Registers the block using the metadata loaded from the `block.json` file.
 * Behind the scenes, it registers also all assets so they can be enqueued
 * through the block editor in the corresponding context.
 *
 * @see https://developer.wordpress.org/reference/functions/register_block_type/
 */
function create_block_rtc_slideshow_block_init() {
	if ( function_exists( 'wp_register_block_types_from_metadata_collection' ) ) { // Function introduced in WordPress 6.8.
		wp_register_block_types_from_metadata_collection( __DIR__ . '/build', __DIR__ . '/build/blocks-manifest.php' );
	} else {
		if ( function_exists( 'wp_register_block_metadata_collection' ) ) { // Function introduced in WordPress 6.7.
			wp_register_block_metadata_collection( __DIR__ . '/build', __DIR__ . '/build/blocks-manifest.php' );
		}
		$manifest_data = require __DIR__ . '/build/blocks-manifest.php';
		foreach ( array_keys( $manifest_data ) as $block_type ) {
			register_block_type( __DIR__ . "/build/{$block_type}" );
		}
	}
}
add_action( 'init', __NAMESPACE__ . '\create_block_rtc_slideshow_block_init' );

/**
 * Registers the Slideshow endpoint.
 *
 * @return void
 * @author Garrett Baldwin
 * @since  1.0.0
 */
function rtc_slideshow_add_rest_endpoint() {
	register_rest_route(
		'rtcs/v1',
		'slideshow',
		[
			'method'              => \WP_REST_Server::READABLE,
			'callback'            => 'Gbaldwin\RtcSlideshow\rtc_slideshow_rest_endpoint',
			'permission_callback' => '__return_true',
		]
	);
}
add_action( 'rest_api_init', __NAMESPACE__ . '\rtc_slideshow_add_rest_endpoint' );

/**
 * Handle the callback for the endpoint.
 *
 * @param WP_REST_Request $request  The WP_REST_Request opject.
 * @return string
 * @author Garrett Baldwin
 * @since  1.0.0
 */
function rtc_slideshow_rest_endpoint( $request ) {

	// get passed url.
	$rtcs_url = urldecode( $request->get_param( 'url' ) );

	// Check we have a valid URL, otherwise return error.
	if ( ! filter_var( $rtcs_url, FILTER_VALIDATE_URL ) ) {
		return new \WP_REST_Response(
			[
				'error' => __( 'Inavlid URL', 'rtc-slideshow' ),
			]
		);
	}

	// Get the URL parts.
	$rtcs_url_parts = wp_parse_url( $rtcs_url );

	// Make sure we have a valid scheme and host, otherwise return error.
	if ( ! isset( $rtcs_url_parts['scheme'] ) || ! isset( $rtcs_url_parts['host'] ) ) {
		return new \WP_REST_Response(
			[
				'error' => __( 'Inavlid URL', 'rtc-slideshow' ),
			]
		);
	}

	// Build our base URL.
	$rtcs_base_url = $rtcs_url_parts['scheme'] . '://' . $rtcs_url_parts['host'];

	// Build the posts endpoint URL.
	$rtcs_endpoint_url = $rtcs_base_url . '/wp-json/wp/v2/posts?_embed';

	// set our transient cache id.
	$rtcs_cache_id = 'rtcs_slideshow_posts';

	// get cached data.
	$rtcs_cached_data = get_transient( $rtcs_cache_id );

	// Check if the cache doesn't exist, or if the url key doesn't match, then get the data and set the cache.
	if ( false === $rtcs_cached_data || ! isset( $rcts_cached_data[ $rtcs_base_url ] ) ) {

		// get the data from the endpoint.
		$rtcs_slideshow_response = wp_remote_get( $rtcs_endpoint_url );

		// check if our request has an error, if so return an error.
		if ( is_wp_error( $rtcs_slideshow_response ) ) {
			return new \WP_REST_Response(
				[
					'error' => __( 'Error in API request.', 'rtc-slideshow' ),
				]
			);
		}

		// All set, let's get our data.
		$rtcs_slideshow_posts = \wp_remote_retrieve_body( $rtcs_slideshow_response );

		// Make sure we have at least an array returned, otherwise return an error.
		if ( ! is_array( json_decode( $rtcs_slideshow_posts ) ) ) {
			return new \WP_REST_Response(
				[
					'error' => __( 'API response is malformed.', 'rtc-slideshow' ),
				]
			);
		}

		// Build our array so we have a url key to check against in case it changes.
		$rtcs_cached_data = [
			$rtcs_base_url => $rtcs_slideshow_posts,
		];

		// Set the cache for 15 minutes.
		set_transient( $rtcs_cache_id, $rtcs_cached_data, MINUTE_IN_SECONDS * 15 );

	}

	// Now we have data, let's boogie!
	return new \WP_REST_Response(
		json_decode( $rtcs_cached_data[ $rtcs_base_url ] ),
	);
}
